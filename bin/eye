#!/usr/bin/env ruby
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), %w{.. lib}))
require 'eye'
require 'thor'

class Cli < Thor

  desc "status", "show process statuses"
  def status
    res = cmd(:status)
    puts res if res && !res.empty?
    puts
  end

  desc "load [CONF]", "load config (and start server if needed) (-f for foregraund start)"
  method_option :foregraund, :type => :boolean, :aliases => "-f"
  def load(conf = "")
    conf = File.expand_path(conf) if conf && !conf.empty?

    if server_started?
      say_load_result cmd(:load, conf)
    else
      if options[:foregraund]
        server_start_foregraund(conf)
      else
        server_start(conf)
      end
    end
  end

  desc "syntax CONF", "check syntax of the config file"
  def syntax(conf)
    say_load_result cmd(:syntax, conf)
  end
  
  desc "quit", "stop eye monitoring"
  def quit
    cmd(:quit)
    say "stopped...", :yellow
  end
  
  [:start, :stop, :restart, :remove, :unmonitor].each do |_cmd|
    desc "#{_cmd} [TARGET]", "#{_cmd} app,group or process"
    define_method(_cmd) do |str=""|
      res = cmd(_cmd, str || "")
      if res == :unknown_command
        say "Unknown command", :red
      elsif res == :nothing
        say "No targets, bad pattern!", :red
      else
        say "command #{_cmd} affected to #{res.to_s}"  
      end        
    end
  end

private

  def client
    @client ||= Eye::Client.new(Eye::Settings.socket_path)
  end

  def _cmd(cmd, *args)
    client.command(cmd, *args)
  rescue Errno::ECONNREFUSED, Errno::ENOENT
    :not_started
  end
  
  def cmd(cmd, *args)
    res = _cmd(cmd, *args)

    if res == :not_started
      say "Eye monitoring not found, did you start it?", :red
      exit
    elsif res == :timeouted
      say "Eye does not answer in time", :red
      exit
    end
    
    res
  end
  
  def server_started?
    _cmd(:ping) == :pong
  end
  
  def server_start_foregraund(conf = nil)
    exec_path = File.expand_path(File.join(File.dirname(__FILE__), 'server_eye'))
    Process.exec(exec_path, conf)
  end

  def server_start(conf = nil)
    Eye::Settings.ensure_eye_dir
    exec_path = File.expand_path(File.join(File.dirname(__FILE__), 'server_eye'))
    pid = Process.spawn(exec_path)
    Process.detach(pid)
    File.open(Eye::Settings.pid_path, 'w'){|f| f.write(pid) }

    sleep 2 # time to server up
    say_load_result cmd(:load, conf)
  end

  def say_load_result(res = {})
    if res[:error]
      say "Config error: ", :red
      say res[:message]

      res[:backtrace].to_a.each{|line| say line}
    else      
      say "config ok!", :yellow if !res[:empty]
    end
  end

end

Cli.start